version: '3.8'
services:
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true

  mongodb:
    image: mongo:8.0
    container_name: mongodb
    restart: unless-stopped
    ports:
      - "127.0.0.1:27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:size=100M,noexec,nosuid,nodev

  backend:
    build: 
      context: .
      dockerfile: Dockerfile.backend
    container_name: barrim-backend
    restart: unless-stopped
    ports:
      - "127.0.0.1:8080:8080"
    environment:
      - MONGODB_URI=mongodb://admin:${MONGO_PASSWORD}@mongodb:27017/?authSource=admin
      - REDIS_ADDR=redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - REDIS_DB=0
      - GIN_MODE=release
      - PORT=8080
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - app-network
    env_file:
      - .env
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:size=100M,noexec,nosuid,nodev
    volumes:
      - uploads_data:/app/uploads
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  barrim-admin-dashboard:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date +%Y%m%d_%H%M%S)}
        VERSION: ${VERSION:-latest}
        BUILD_TIMESTAMP: ${BUILD_TIMESTAMP:-$(date +%s)}
        CACHE_BUST: ${CACHE_BUST:-$(date +%s)}
    container_name: barrim-admin-dashboard
    restart: unless-stopped
    ports:
      - "127.0.0.1:3000:80"
    depends_on:
      - backend
    networks:
      - app-network
    environment:
      - BUILD_DATE=${BUILD_DATE:-$(date +%Y%m%d_%H%M%S)}
      - VERSION=${VERSION:-latest}
      - BUILD_TIMESTAMP=${BUILD_TIMESTAMP:-$(date +%s)}
    # Health check removed - nginx:alpine doesn't have healthcheck.sh
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  privacy-service:
    build:
      context: ./privacy
      dockerfile: Dockerfile
    container_name: privacy-service
    restart: unless-stopped
    ports:
      - "127.0.0.1:3001:80"
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M

  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /var/www/certbot:/var/www/certbot:ro
    depends_on:
      - backend
      - barrim-admin-dashboard
    networks:
      - app-network

volumes:
  redis_data:
    driver: local
  mongodb_data:
    driver: local
  uploads_data:
    driver: local

networks:
  app-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: barrim-bridge

